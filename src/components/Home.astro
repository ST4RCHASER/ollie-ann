---
import { events } from "../const/event.astro";
const initialEvent = events[0];
const initialSlide = initialEvent?.slides?.[0];
const eventsJson = JSON.stringify(events)
  .replace(/<\/script/gi, "<\\/script")
  .replace(/</g, "\\u003c");
---

<div id="container">
  <div class="bg-[#E90246] relative h-42">
    <div class="absolute top-0 w-full h-42 px-16">
      <div
        class="slider bg-[url(/upper-bar-bg.png)] w-full h-full bg-repeat-x bg-center sm:bg-contain"
      >
      </div>
    </div>
    <div class="w-full">
      <div class="relative flex items-center justify-between gap-12">
        <div class="absolute z-30 left-0 w-16 h-26 ml-24">
          <div
            class="h-full w-full mt-4 bg-gradient-to-r from-[#E90246] to-[#E90246]/0"
          >
          </div>
        </div>
        <button
          type="button"
          aria-label="Previous slide"
          data-carousel-prev
          class="absolute z-40 flex w-18 items-center justify-center rounded-full bg-transparent transition hover:translate-y-1 active:translate-y-2 mt-8 mx-8"
        >
          <img src="./left-button.png" alt="" class="h-full w-full" />
        </button>
        <div class="filmstrip-wrapper">
          <div class="filmstrip-track" data-carousel-thumbs>
            {
              events.map((event, index) => (
                <button
                  type="button"
                  class="filmstrip-tile"
                  data-event-index={index}
                  data-active={index === 0}
                  aria-label={`Show event ${index + 1}`}
                  aria-selected={index === 0}
                >
                  <img
                    src={
                      event.thumb ??
                      event.slides?.[0]?.thumb ??
                      event.slides?.[0]?.big ??
                      ""
                    }
                    alt={event.title}
                    class="h-full w-full object-cover"
                  />
                  <span>{event.title}</span>
                </button>
              ))
            }
          </div>
        </div>

        <div class="absolute z-30 right-0 w-16 h-26 mr-24">
          <div
            class="h-full w-full mt-4 bg-gradient-to-l from-[#E90246] to-[#E90246]/0"
          >
          </div>
        </div>
        <button
          type="button"
          aria-label="Next slide"
          data-carousel-next
          class="absolute right-0 z-40 flex w-18 items-center justify-center rounded-full bg-transparent transition hover:translate-y-1 active:translate-y-2 mt-8 mx-8"
        >
          <img src="./right-button.png" alt="" class="h-full w-full" />
        </button>
      </div>
    </div>
  </div>
</div>
<main class="home pt-8">
  <div class="mx-24">
    <div class="flex justify-center w-full">
      <div class="relative w-full max-w-[95vw]" data-carousel>
        <div class="relative h-[50vh] overflow-hidden rounded-lg bg-black">
          <img
            data-active-image
            src={initialSlide?.big}
            alt={initialSlide?.title ?? "Event slide"}
            class="h-full w-full object-cover"
          />
          <button
            type="button"
            aria-label="Previous slide"
            data-slide-prev
            class="absolute left-6 top-1/2 z-20 -translate-y-1/2 flex items-center justify-center transition focus:outline-none hover:-translate-x-1"
            style="display: none;"
          >
            <img src="./left-arrow.png" alt="Previous slide" class="w-8" />
          </button>
          <button
            type="button"
            aria-label="Next slide"
            data-slide-next
            class="absolute right-6 top-1/2 z-20 -translate-y-1/2 flex items-center justify-center transition focus:outline-none hover:translate-x-1"
            style="display: none;"
          >
            <img src="./right-arrow.png" alt="Next slide" class="w-8" />
          </button>
          <button
            type="button"
            aria-label="View full image"
            data-slide-lightbox
            class="absolute right-6 top-6 z-20 flex h-10 items-center justify-center rounded-full bg-black/55 p-2 shadow-lg transition hover:bg-black/70 focus:outline-none focus:ring-2 focus:ring-white/70"
          >
            <img src="./magnifier.png" alt="View full image" class="w-6" />
          </button>
          <div
            class="absolute bottom-6 left-1/2 z-20 flex -translate-x-1/2 items-center gap-3"
            data-slide-dots
            role="tablist"
            aria-label="Event slides"
          >
          </div>
          <div
            class="pointer-events-none absolute inset-x-0 bottom-0 z-10 bg-gradient-to-t from-black via-black/50 to-transparent p-6 text-white"
            data-slide-content
          >
            <div
              class="flex flex-col gap-4 md:flex-row md:items-end md:justify-between"
            >
              <div class="space-y-2 max-w-3xl">
                <p class="text-sm uppercase tracking-[0.35em]" data-event-date>
                  {initialEvent?.date}
                </p>
                <h2 class="text-3xl font-bold md:text-4xl" data-active-title>
                  {initialSlide?.title ?? ""}
                </h2>
                <p class="text-lg md:text-xl" data-active-desc>
                  {initialSlide?.desc ?? ""}
                </p>
              </div>
              <div class="space-y-1 text-sm text-white/80 md:text-right">
                <p
                  class="font-semibold uppercase tracking-[0.2em]"
                  data-event-title
                >
                  {initialEvent?.title}
                </p>
                <p data-active-credit>{initialSlide?.credit ?? ""}</p>
                <p data-slide-counter>
                  {`1 / ${initialEvent?.slides?.length ?? 0}`}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="flex mt-6 gap-8">
      <div class="flex gap-4 w-1/2">
        <div>
          <img src="/ollie-blink.gif" class="w-80" alt="" />
        </div>
        <div>
          <div>
            <img src="/logo.png" alt="" class="w-48" />
          </div>
          <div class="flex justify-between gap-8 mt-4">
            <div class="relative">
              <img
                src="/button-submission-hover.png"
                alt=""
                class="w-64 absolute opacity-0 hover:opacity-100 duration-300"
              />
              <img src="/button-submission.png" alt="" class="w-64" />
            </div>
            <a
              href="https://hololive.hololivepro.com/en/talents/kureiji-ollie/"
              target="_blank"
              class="relative"
            >
              <img
                src="/button-whosollie-hover.png"
                alt=""
                class="w-64 absolute opacity-0 hover:opacity-100 duration-300"
              />
              <img src="/button-whosollie.png" alt="" class="w-64" />
            </a>
            <a class="relative" href="/credits">
              <img
                src="/button-credits-hover.png"
                alt=""
                class="w-64 absolute opacity-0 hover:opacity-100 duration-300"
              />
              <img src="/button-credits.png" alt="" class="w-64" />
            </a>
          </div>
        </div>
      </div>
      <div
        class="text-white text-4xl w-1/2"
        data-event-desc
        set:html={initialEvent?.desc}
      />
    </div>
  </div>
  <div class="text-white bg-[#E90246] text-center py-4 h-full">
    Not affiliated with COVER Corp., hololive, or holostars talents in any way.
  </div>
</main>

<div
  data-lightbox
  class="fixed inset-0 z-50 hidden items-center justify-center bg-black/90 p-6"
  role="dialog"
  aria-modal="true"
  aria-label="Slide full image"
>
  <button
    type="button"
    data-lightbox-close
    class="text-3xl absolute right-8 top-8 flex h-12 w-12 items-center justify-center rounded-full bg-white/10 text-white shadow focus:outline-none focus:ring-2 focus:ring-white/70"
    aria-label="Close image"
  >
    Ã—
  </button>
  <img
    data-lightbox-image
    src={initialSlide?.big}
    alt={initialSlide?.title ?? "Event slide"}
    class="max-h-[90vh] max-w-[90vw] rounded-lg object-contain shadow-2xl"
  />
</div>

<script type="application/json" id="events-data" set:html={eventsJson} />

<script>
  const container = document.querySelector("[data-carousel]");
  const eventButtons = Array.from(
    document.querySelectorAll("[data-event-index]")
  );
  const prevButtons = Array.from(
    document.querySelectorAll("[data-carousel-prev]")
  );
  const nextButtons = Array.from(
    document.querySelectorAll("[data-carousel-next]")
  );
  const slidePrevButton = container?.querySelector("[data-slide-prev]");
  const slideNextButton = container?.querySelector("[data-slide-next]");
  const slideDotsContainer = container?.querySelector("[data-slide-dots]");
  const slideContent = container?.querySelector("[data-slide-content]");
  const lightboxButton = container?.querySelector("[data-slide-lightbox]");
  const lightbox = document.querySelector("[data-lightbox]");
  const lightboxImage = lightbox?.querySelector("[data-lightbox-image]");
  const lightboxClose = lightbox?.querySelector("[data-lightbox-close]");

  let events = [];
  let slideDotButtons = [];
  let autoSlideTimer;
  let isLightboxOpen = false;
  const AUTO_SLIDE_INTERVAL = 6500;

  const dataElement = document.getElementById("events-data");
  const serialized = dataElement?.textContent;

  if (serialized) {
    try {
      events = JSON.parse(serialized);
    } catch (error) {
      console.error("Unable to load event data", error);
    }
  }

  if (!container || !events.length || !eventButtons.length) {
    console.warn("Carousel missing required data");
  } else {
    const mainImage = container.querySelector("[data-active-image]");
    const titleEl = container.querySelector("[data-active-title]");
    const descEl = container.querySelector("[data-active-desc]");
    const creditEl = container.querySelector("[data-active-credit]");
    const dateEl = container.querySelector("[data-event-date]");
    const descEventEl = document.querySelector("[data-event-desc]");
    const eventTitleEl = container.querySelector("[data-event-title]");
    const counterEl = container.querySelector("[data-slide-counter]");

    let activeEventIndex = 0;
    let activeSlideIndex = 0;

    const getEventByIndex = (index) => events[index] ?? null;

    const updateEventButtonsState = () => {
      eventButtons.forEach((button, index) => {
        const isActive = index === activeEventIndex;
        button.dataset.active = String(isActive);
        button.setAttribute("aria-selected", String(isActive));
      });

      const activeButton = eventButtons[activeEventIndex];
      if (activeButton) {
        activeButton.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "center",
        });
      }
    };

    const scheduleAutoSlide = () => {
      clearTimeout(autoSlideTimer);

      const currentEvent = getEventByIndex(activeEventIndex);
      if (
        !currentEvent ||
        !Array.isArray(currentEvent.slides) ||
        currentEvent.slides.length <= 1 ||
        isLightboxOpen
      ) {
        return;
      }

      autoSlideTimer = window.setTimeout(() => {
        const latestEvent = getEventByIndex(activeEventIndex);
        if (
          !latestEvent ||
          !Array.isArray(latestEvent.slides) ||
          latestEvent.slides.length <= 1
        ) {
          return;
        }

        setActiveSlide(activeSlideIndex + 1, latestEvent);
      }, AUTO_SLIDE_INTERVAL);
    };

    const closeLightbox = () => {
      if (!lightbox) return;
      isLightboxOpen = false;
      lightbox.classList.add("hidden");
      lightbox.classList.remove("flex");
      document.body.classList.remove("overflow-hidden");
      scheduleAutoSlide();
    };

    const setActiveSlide = (requestedIndex, eventOverride) => {
      const currentEvent = eventOverride ?? getEventByIndex(activeEventIndex);

      if (
        !currentEvent ||
        !Array.isArray(currentEvent.slides) ||
        !currentEvent.slides.length
      ) {
        return;
      }

      const slideCount = currentEvent.slides.length;
      const nextIndex =
        ((requestedIndex % slideCount) + slideCount) % slideCount;
      const previousIndex = activeSlideIndex;
      const slide = currentEvent.slides[nextIndex];

      if (!slide) return;

      const isWrapForward = previousIndex === slideCount - 1 && nextIndex === 0;
      const isWrapBackward =
        previousIndex === 0 && nextIndex === slideCount - 1;

      let direction = "none";

      if (nextIndex !== previousIndex) {
        if (isWrapForward) {
          direction = "forward";
        } else if (isWrapBackward) {
          direction = "backward";
        } else {
          direction = nextIndex > previousIndex ? "forward" : "backward";
        }
      }

      activeSlideIndex = nextIndex;

      if (mainImage) {
        mainImage.src = slide.big;
        mainImage.alt = slide.title || "Event slide";
      }

      if (titleEl) titleEl.textContent = slide.title || "";
      if (descEl) descEl.textContent = slide.desc || "";
      if (creditEl) creditEl.textContent = slide.credit || "";
      if (dateEl) dateEl.textContent = currentEvent.date || "";
      if (descEventEl) descEventEl.setHTMLUnsafe(currentEvent.desc || "");
      if (eventTitleEl) eventTitleEl.textContent = currentEvent.title || "";
      if (counterEl) counterEl.textContent = `${nextIndex + 1} / ${slideCount}`;

      if (lightboxImage) {
        lightboxImage.src = slide.big;
        lightboxImage.alt = slide.title || "Event slide";
      }

      slideDotButtons.forEach((dot, index) => {
        const isActive = index === nextIndex;
        dot.dataset.active = String(isActive);
        dot.setAttribute("aria-selected", String(isActive));
      });

      const animateTargets = [mainImage, slideContent];
      animateTargets.forEach((target) => {
        if (!target) return;
        target.classList.remove("slide-forward", "slide-backward");
        void target.offsetWidth;
        if (direction === "forward") {
          target.classList.add("slide-forward");
        } else if (direction === "backward") {
          target.classList.add("slide-backward");
        }
      });

      scheduleAutoSlide();
    };

    const renderSlideDots = (eventData) => {
      if (!slideDotsContainer) return;

      slideDotsContainer.innerHTML = "";
      slideDotButtons = [];

      const slides = Array.isArray(eventData?.slides) ? eventData.slides : [];
      const hasMultiple = slides.length > 1;

      if (slidePrevButton) {
        slidePrevButton.style.display = hasMultiple ? "flex" : "none";
      }
      if (slideNextButton) {
        slideNextButton.style.display = hasMultiple ? "flex" : "none";
      }

      if (!hasMultiple) {
        clearTimeout(autoSlideTimer);
        return;
      }

      slides.forEach((slide, index) => {
        const dot = document.createElement("button");
        dot.type = "button";
        dot.dataset.slideIndex = String(index);
        dot.dataset.active = String(index === 0);
        dot.setAttribute("aria-label", `Show slide ${index + 1}`);
        dot.setAttribute("aria-selected", index === 0 ? "true" : "false");
        dot.setAttribute("role", "tab");
        dot.className = "carousel-dot";
        dot.addEventListener("click", () => setActiveSlide(index, eventData));
        slideDotsContainer.appendChild(dot);
        slideDotButtons.push(dot);
      });

      scheduleAutoSlide();
    };

    const setActiveEvent = (requestedIndex) => {
      const eventCount = events.length;
      if (!eventCount) return;

      const nextIndex =
        ((requestedIndex % eventCount) + eventCount) % eventCount;
      const eventData = getEventByIndex(nextIndex);

      if (
        !eventData ||
        !Array.isArray(eventData.slides) ||
        !eventData.slides.length
      ) {
        return;
      }

      activeEventIndex = nextIndex;
      activeSlideIndex = 0;

      updateEventButtonsState();
      renderSlideDots(eventData);
      setActiveSlide(activeSlideIndex, eventData);
    };

    eventButtons.forEach((button, index) => {
      button.addEventListener("click", () => {
        if (isLightboxOpen) closeLightbox();
        setActiveEvent(index);
      });
      button.addEventListener("keydown", (domEvent) => {
        if (domEvent.key === "Enter" || domEvent.key === " ") {
          domEvent.preventDefault();
          if (isLightboxOpen) closeLightbox();
          setActiveEvent(index);
        }
      });
    });

    if (slidePrevButton) {
      slidePrevButton.addEventListener("click", () =>
        setActiveSlide(activeSlideIndex - 1)
      );
    }

    if (slideNextButton) {
      slideNextButton.addEventListener("click", () =>
        setActiveSlide(activeSlideIndex + 1)
      );
    }

    if (lightboxButton && lightbox) {
      lightboxButton.addEventListener("click", () => {
        if (!lightboxImage) return;
        clearTimeout(autoSlideTimer);
        isLightboxOpen = true;
        lightbox.classList.remove("hidden");
        lightbox.classList.add("flex");
        document.body.classList.add("overflow-hidden");
      });
    }

    if (lightboxClose) {
      lightboxClose.addEventListener("click", closeLightbox);
    }

    if (lightbox) {
      lightbox.addEventListener("click", (event) => {
        if (event.target === lightbox) {
          closeLightbox();
        }
      });
    }

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && isLightboxOpen) {
        closeLightbox();
      }
    });

    prevButtons.forEach((button) => {
      button.addEventListener("click", () =>
        setActiveEvent(activeEventIndex - 1)
      );
    });

    nextButtons.forEach((button) => {
      button.addEventListener("click", () =>
        setActiveEvent(activeEventIndex + 1)
      );
    });

    setActiveEvent(activeEventIndex);
  }
</script>

<style>
  .filmstrip-wrapper {
    position: relative;
    justify-content: center;
    width: 100%;
    margin-top: 34px;
    padding-left: 6rem;
    padding-right: 6rem;
  }

  .filmstrip-track {
    position: relative;
    display: flex;
    align-items: center;
    gap: 24px;
    background: transparent;
    overflow-x: hidden;
    scroll-snap-type: x proximity;
    scroll-behavior: smooth;
  }

  .filmstrip-track::-webkit-scrollbar {
    display: none;
  }

  .filmstrip-tile {
    flex: 0 0 148px;
    height: 96px;
    overflow: hidden;
    border-radius: 14px;
    border: 2px solid transparent;
    background: rgba(233, 2, 70, 0.25);
    color: #fff;
    font-weight: 700;
    text-transform: uppercase;
    font-size: 0.75rem;
    letter-spacing: 0.12em;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    transition:
      transform 0.2s ease,
      border-color 0.2s ease,
      box-shadow 0.2s ease;
    scroll-snap-align: center;
    position: relative;
  }

  .filmstrip-tile img {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0.65;
    transition: opacity 0.2s ease;
  }

  .filmstrip-tile span {
    position: relative;
    z-index: 1;
    line-height: 1.25;
  }

  [data-event-index][data-active="true"] {
    border-color: #ffffff;
    box-shadow: 0 0 0 4px rgba(233, 2, 70, 0.45);
  }

  [data-event-index][data-active="true"] img {
    opacity: 1;
  }

  [data-event-index][data-active="true"] span {
    text-shadow: 0 2px 12px rgba(0, 0, 0, 0.55);
  }

  [data-event-index]:hover {
    transform: translateY(-4px);
  }

  .carousel-dot {
    height: 12px;
    width: 12px;
    border-radius: 9999px;
    border: 2px solid rgba(255, 255, 255, 0.6);
    background: transparent;
    transition:
      transform 0.2s ease,
      border-color 0.2s ease,
      background-color 0.2s ease;
  }

  .carousel-dot:hover {
    transform: scale(1.1);
  }

  .carousel-dot[data-active="true"] {
    background: #ffffff;
    border-color: #ffffff;
    transform: scale(1.25);
  }

  .slide-forward {
    animation: slideForward 0.45s ease both;
  }

  .slide-backward {
    animation: slideBackward 0.45s ease both;
  }

  @keyframes slideForward {
    from {
      transform: translateX(40px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideBackward {
    from {
      transform: translateX(-40px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>
